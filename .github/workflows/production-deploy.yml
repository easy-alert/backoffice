name: Production Deploy

on:
  push:
    branches:
      - master

jobs:
  production_bucket_check:
    name: Production Bucket Check
    runs-on: ubuntu-latest
    environment: production  # ðŸ‘‰ Aqui define que este job usarÃ¡ o ambiente 'production'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install AWS CLI via pip
        run: |
          python3 -m pip install --upgrade pip
          pip3 install awscli --upgrade --user

      - name: Check and Configure S3 Bucket
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: |
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          aws s3 mb s3://$S3_BUCKET --region us-east-1 2> /dev/null || echo "Bucket already exists"
          aws s3 website s3://$S3_BUCKET --index-document index.html --error-document index.html || echo "Website configuration done"

  production_build:
    name: Production Build
    runs-on: ubuntu-latest
    environment: production  # ðŸ‘‰ Aqui define que este job usarÃ¡ o ambiente 'production'
    needs: production_bucket_check
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Build Project
        run: yarn build

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          retention-days: 1

  production_deploy:
    name: Production Deploy
    runs-on: ubuntu-latest
    environment: production  # ðŸ‘‰ Aqui define que este job usarÃ¡ o ambiente 'production'
    needs: production_build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Install AWS CLI via pip
        run: |
          python3 -m pip install --upgrade pip
          pip3 install awscli --upgrade --user

      - name: Deploy to S3 and Invalidate CloudFront
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          DISTRIBUTION_ID: ${{ secrets.DISTRIBUTION_ID }}
        run: |
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          aws s3 rm s3://$S3_BUCKET --recursive
          aws s3 sync ./dist s3://$S3_BUCKET --acl public-read
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths '/*'
